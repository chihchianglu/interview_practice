//
// Created by Lu, Chih-chiang on 2019-03-28.
//

// 在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡–旋转。
// 旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。
// 通过旋转可以降低高度。
// 所谓的左旋和右旋都是以子树为原点的：如b是a的子树，那么旋转就围绕b来进行。
// 如果b是a的左子树，那么就围绕b将a向右旋转，看着就像是a直接掉下来了，掉成了b的右子树。
// 如果b是a的右子树，那么就围绕b将a向左旋转，看着就像是a直接掉下来了，掉成了b的左子树。
// 插入节点时分四种情况，四种情况对应的旋转方法是不同的：
//
// 例如对于被破坏平衡的节点a来说：
// 插入方式                     描述                      旋转方式
//   LL      在a的左子树根节点的左子树上插入节点而破坏平衡     右旋转
//   RR      在a的右子树根节点的右子树上插入节点而破坏平衡     左旋转
//   LR      在a的左子树根节点的右子树上插入节点而破坏平衡   先左旋后右旋
//   RL      在a的右子树根节点的左子树上插入节点而破坏平衡   先右旋后左旋
//
// LL:
//    50 (parent)
//    /\
//   40 60
//   /\
// 30 45
// insert on LL position:
//     50 (parent)
//     /\
//    40 60
//    /\
//  30 45
//  /
// 20
// right rotate:
//    40
//    /\
//   30 50
//   /  /\
// 20  45 60
//
// RR:
//    40 (parent)
//   /\
//  30 50
//     /\
//    45 60
// insert on RR position
//   40
//   /\
//  30 50
//     /\
//    45 60
//        \
//        65
// left rotate:
//    50
//    /\
//   40 60
//   /\  \
// 30 45 65

// Definition for a binary tree node.
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

int main(int argc, char *argv[]) {
  return 0;
}
